// <auto-generated />
using System;
using GFS.QuotesService.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GFS.QuotesService.DAL.Migrations
{
    [DbContext(typeof(QuotesServiceDbContext))]
    [Migration("20240609212334_ChangeQuotesBkgWorker")]
    partial class ChangeQuotesBkgWorker
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.AssetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AssetType")
                        .HasColumnType("integer");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FIGI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ISIN")
                        .HasColumnType("text");

                    b.Property<int>("MarketType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FIGI")
                        .IsUnique();

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.AssetInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("First1DayCandleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("First1MinCandleDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("IpoDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Lot")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinPriceIncrement")
                        .HasColumnType("numeric");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.ToTable("AssetInfos", (string)null);
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.AssetProviderCompatibilityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompatibility")
                        .HasColumnType("boolean");

                    b.Property<int>("QuotesProviderType")
                        .HasColumnType("integer");

                    b.Property<int>("TimeFrame")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssetId", "QuotesProviderType")
                        .IsUnique();

                    b.ToTable("AssetProviderCompatibilities", (string)null);
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.QuoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric");

                    b.Property<int>("QuotesProviderType")
                        .HasColumnType("integer");

                    b.Property<int>("TimeFrame")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AssetId", "QuotesProviderType", "TimeFrame");

                    b.HasIndex("AssetId", "QuotesProviderType", "TimeFrame", "Date")
                        .IsUnique();

                    b.ToTable("Quotes", (string)null);
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.UpdateQuotesTaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetByProviderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastQuoteDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssetByProviderId")
                        .IsUnique();

                    b.ToTable("UpdateQuotesTasks", (string)null);
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.AssetInfoEntity", b =>
                {
                    b.HasOne("GFS.QuotesService.DAL.Entities.AssetEntity", "Asset")
                        .WithOne("AssetInfo")
                        .HasForeignKey("GFS.QuotesService.DAL.Entities.AssetInfoEntity", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.AssetProviderCompatibilityEntity", b =>
                {
                    b.HasOne("GFS.QuotesService.DAL.Entities.AssetEntity", "Asset")
                        .WithMany("ProviderCompatibilities")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.QuoteEntity", b =>
                {
                    b.HasOne("GFS.QuotesService.DAL.Entities.AssetEntity", "Asset")
                        .WithMany("Quotes")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.UpdateQuotesTaskEntity", b =>
                {
                    b.HasOne("GFS.QuotesService.DAL.Entities.AssetProviderCompatibilityEntity", "AssetByProvider")
                        .WithMany("UpdateQuotesTasks")
                        .HasForeignKey("AssetByProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetByProvider");
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.AssetEntity", b =>
                {
                    b.Navigation("AssetInfo");

                    b.Navigation("ProviderCompatibilities");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("GFS.QuotesService.DAL.Entities.AssetProviderCompatibilityEntity", b =>
                {
                    b.Navigation("UpdateQuotesTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
